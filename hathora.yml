types:
  PlayerStatus:
    - WAITING
    - THINKING
    - ACTIVE
  RoundStatus:
    - WAITING
    - ACTIVE
    - COMPLETED
  RoundGameModule:
    - PRIZE_DRAW
    - LOWEST_UNIQUE_BID
    - MAGIC_MONEY_MACHINE
    - PICK_A_PRIZE
    - TRADING
    - MEDALLION_MAJORITY_VOTE
  PrizeType:
    - MONEY
    - MEDALLION
  PhasingPlayerMedallionVote:
    - DECISION
    - VOTER
  PlayerSelf:
    id: UserId
    money: int
    medallions: int
    status: PlayerStatus
    lockedTrade: boolean
  PlayerInfo:
    id: UserId
    lockedTrade: boolean
  PlayerState:
    self: PlayerSelf?
    players: PlayerInfo[]
    activePlayer: UserId?
    roundStatus: RoundStatus
    bank: int
    prizeDraw: PrizeDraw?
    lowestUniqueBidder: LowestUniqueBidder?
    pickAPrize: PickAPrize?
    magicMoneyMachine: MagicMoneyMachine?
    currentGame: RoundGameModule?
    turnNumber: int
    medallionVoteDecisionPlayer: MedallionVoteDecisionPlayer? # for more complicated assymetric state, should probably go towards an entirely different playerstate object, for this one use case nesting is find
    # OR dependening on which player has the most medallions
    medallionVoteVotePlayer: MedallionVoteVotePlayer?
  Trading: 
    lockedTrade: boolean
  PlayerBox:
    id: UserId
    money: int
  MedallionVotePlayersInfoPerspectiveVote:
    id: UserId
    lockedVote: boolean
  DecisionPlayerInfoPerspectiveVote:
    id: UserId
    lockDeposit: boolean
  MedallionVoteVotePlayer:
    votePlayers: MedallionVotePlayersInfoPerspectiveVote[]
    decisionPlayer: DecisionPlayerInfoPerspectiveVote
    round: int
    votesPerRound: boolean[]
    moneyInBoxPerRound: int[]
    lockedVote: boolean
    phasingPlayer: PhasingPlayerMedallionVote?
  MedallionVotePlayersInfoPerspectiveDecision:
    id: UserId
    lockedVote: boolean
    votesPerRound: boolean[] #Perfect information on vote results, not sure if this is more fun or "better" than hidden vote results
  MedallionVoteDecisionPlayer:
    votePlayers: MedallionVotePlayersInfoPerspectiveDecision[]
    round: int
    moneyInBoxesPerRound: PlayerBox[][]
    moneyAllocation: int
    lockedDecision: boolean
    phasingPlayer: PhasingPlayerMedallionVote?
  PrizeDraw:
    players: PrizeDrawPlayers[]
    round: int
    potsPerRound: int[]
    medallionsPerRound: int[]
    minTickets: int
    maxTickets: int
    ticketsEntered: int?
    ticketsLocked: boolean
    winningsPerRound: int[]
    medallionsWonPerRound: int[]
  PrizeDrawPlayers:
    id: UserId
    ticketsLocked: boolean
    roundsWon: boolean[]
  LowestUniqueBidder:
    players: LowestUniqueBidderPlayers[]
    round: int
    multipliersPerRound: int[]
    medallionsPerRound: int[]
    revealedPaddles: RevealedPaddle[][]
    paddlesToChooseFrom: int[]
    chosenPaddle: int?
    lockedPaddle: boolean
  LowestUniqueBidderPlayers:
    id: UserId
    winningsPerRound: int[]
    medallionsPerRound: int[]
    lockPaddle: boolean
  RevealedPaddle:
    playerId: UserId
    paddle: int
  PickAPrize:
    players: PickAPrizePlayers[]
    round: int
    #TODO: These prizes should only be unveiled one at a time
    prizesPerRound: Prize[][]
    bonusPrizePerRound: boolean[]
    chosenPrize: int?
    lockPrizeSelection: boolean
  Prize: 
    prizeType: PrizeType
    amount: int
  PickAPrizePlayers:
    id: UserId
    winningsPerRound: int[]
    medallionsPerRound: int[]
    lockPrizeSelection: boolean
  MagicMoneyMachine:
    players: MagicMoneyMachinePlayers[]
    round: int
    interestPerRound: float[]
    totalInterestPerRound: int[]
    totalPayoutPerRound: int[]
    moneyInHand: int
    moneyInBox: int
    lockedMoney: boolean
    winningsPerRound: int[]
  MagicMoneyMachinePlayers:
    id: UserId
    lockedMoney: boolean
events:
  prizeDrawPlayersLocked: string
  prizeDrawPlayerWinnerDeclared: UserId
  prizeDrawNextRoundStarting: string
  newRound: string
  lowestUniqueBidPlayersLocked: string
  lowestUniqueBidPlayerWinnerDeclared: string
  lowestUniqueBidNextRoundStarting: string
  lowestUniqueBidRevealPaddles: string
  magicMoneyMachinePlayersLocked: string
  pickAPrizePlayersLocked: string
  gameEnded: string
  moneyTransfer: string
  medallionTransfer: string
  startTradingRound: string
  tradingAllPlayersLocked: string
methods:
  joinGame:
  startGame:
  startRound:
  transferMoney:
    amount: int
    playerIdToSendTo: string
  #Prize Draw
  enterTicketsAmount:
    tickets: int
  lockTickets:
  #Lowest Unique Bid
  choosePaddle:
    paddleNumber: int
  lockPaddle:
  #Magic Money Machine
  putMoneyInBox:
    amount: int
  removeMoneyFromBox:
    amount: int
  lockMoney:
  #Pick A Prize
  selectAPrize:
    prizeNumber: int
  lockPrizeSelection:
  #Trading
  lockTrading:
  #Medallion Majority Vote
  lockDeposits:
  putMoneyInBoxDecision:
    playerId: UserId
    amount: int
  removeMoneyFromBoxDecision:
    playerId: UserId
    amount: int
  submitVote:
    vote: boolean
  lockVote:
auth:
  anonymous: {}

userState: PlayerState
error: string
